<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hawk on Alexander von Boguszewski</title>
    <link>http://alexander.vonboguszewski.name/tags/hawk/</link>
    <description>Recent content in Hawk on Alexander von Boguszewski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <lastBuildDate>Thu, 12 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://alexander.vonboguszewski.name/tags/hawk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TIBCO BW5 Hawk Alerts verarbeiten</title>
      <link>http://alexander.vonboguszewski.name/techdocs/bw5_hawk_messages/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://alexander.vonboguszewski.name/techdocs/bw5_hawk_messages/</guid>
      <description>Leider gibt es keine vorkonfigurierte Palette mit denen Hawk Alerts und Notifications in einem Tibco BW Prozess eingelesen werden können. Mit einem Java Process Starter und der Hawk Console API kann man die Alerts trotzdem recht leicht abgreifen. Für eine HAWK Domain mit EMS als Data Transport habe ich ein kleines Beispiel erstellt. Wichtig ist es die HAWK, EMS und RV Bibliotheken im Classpath vorhanden sind. Ich habe das JAR tibrvj.</description>
    </item>
    
    <item>
      <title>TIBCO Hawk Architektur</title>
      <link>http://alexander.vonboguszewski.name/techdocs/hawk_configure/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alexander.vonboguszewski.name/techdocs/hawk_configure/</guid>
      <description>TIBCO Hawk ist ein Tool zum Überwachen und Verwalten von verteilten Anwendungen und Systemen. Systemadministratoren können Verhalten, Anwendungs- und Systemparameter für alle Knoten in einem Netzwerk überwachen und automatisierte Aktionen ausführen lassen wenn definierte Bedingungen eintreten. Im Gegensatz zu den meisten anderen Management Lösungen ist HAWK als verteiltes System konzipiert. Es gibt daher keinen zentralen Server, der Informationen von den anderen Knoten sammelt. Daher gibt es keinen Single Point of Failure, wenn der Server aus irgendeinem Grund ausfällt.</description>
    </item>
    
  </channel>
</rss>